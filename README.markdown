IronTickets
===========
A Web, E-Mail, and XMPP tracking system for IT solutions providers similar to ConnectWise.
Visit http://demo.irontickets.com/ for a demo.  Username: demo / Password: irontickets.


Setup Your Development Box
==========================
IronTickets was developed against the git tip of of its dependencies.  In order to keep things from interfering with other python applications on your system, I recommend putting the source for everything into it's own folder.

Get IronTickets and Dependencies
================================
    mkdir ~/itcode && cd ~/itcode
    git clone git://github.com/darkpixel/irontickets.git
    git clone git://github.com/django-extensions/django-extensions.git
    git clone git://github.com/jtauber/django-mailer.git
    git clone git://github.com/alex/django-ajax-validation.git
    git clone git://github.com/bartTC/django-attachments.git
    git clone git://github.com/toastdriven/django-haystack.git
    git clone git://github.com/ericflo/django-avatar.git
    git clone git://github.com/django/django.git

*sigh*  some people just haven't seen the light yet...grab a copy of django-registration using mercurial:

    hg clone http://bitbucket.org/ubernostrum/django-registration/

...and grab a copy of whoosh

    svn co http://svn.whoosh.ca/projects/whoosh/trunk/ whoosh


Setup Your Django Project
=========================

    cd ~/itcode
    python ~/itcode/django/django/bin/django-admin.py startproject itsite


Link Your Dependencies
======================

    cd ~/itcode/itsite
    ln -s ../django-attachments/attachments .
    ln -s ../django-avatar/avatar .
    ln -s ../django-extensions/django_extensions .
    ln -s ../django-haystack/haystack .
    ln -s ../django-mailer/mailer .
    ln -s ../django-registration/registration .
    ln -s ../irontickets/irontickets .
    ln -s ../django-ajax-validation/ajax_validation .
    ln -s ../whoosh/src/whoosh .


Set Your Settings
=================
Go edit the settings.py file with your favorite editor and make sure the following settings are set:

When an e-mail is generated by IronTickets, it will send links using this protocol.  Can be http or https.
    IT_USE_PROTO = 'http'

If you want to use the jabber bot so your techs can submit, close, and comment on tickets, enter notes into their TechStream, and more--provide the settings for your jabber box.
    IT_BOT_USERNAME = 'ticketbot@mycompany.com'
    IT_BOT_PASSWORD = 'botpass'

If you want IronTickets to be able to connect out to a mailbox send/receive mail relating to tickets, please make sure these settings are correct:
    IT_MAILSUCK_ADDRESS = 'tickets@mycompany.com'
    IT_MAILSUCK_SERVER_TYPE = 'imaps' #imap, imaps, pop3, pop3s
    IT_MAILSUCK_SERVER = 'mail.mycompany.com'
    IT_MAILSUCK_USER = 'tickets'
    IT_MAILSUCK_PASS = 'mailpass'

To enable search, you must fill in these settings, along with providing a path where haystack can create the search index:
    HAYSTACK_SITECONF = 'irontickets.search_sites'
    HAYSTACK_SEARCH_ENGINE = 'whoosh'
    HAYSTACK_WHOOSH_PATH = '/home/aaron/itcode/itsite/irontickets_index'

Lastly, if you want your staff and customers to be able to have pictures attached to their account, you need to provide a default image:
    AVATAR_DEFAULT_URL = 'http://github.com/darkpixel/irontickets/raw/master/media/irontickets/images/generic-avatar.gif'

And if you want the system to fall back to looking up an image based on the customer e-mail address and the gravatar service, set this:
    AVATAR_GRAVATAR_BACKUP = True


Add the poorly named IronTickets POP3Backend to AUTHENTICATION_BACKENDS if you want customers to be able to signin with their own username/e-mail address and have it verified against their e-mail server.
    AUTHENTICATION_BACKENDS = (
        'django.contrib.auth.backends.ModelBackend',
        'irontickets.auth.POP3Backend',
    )

There are also several TEMPLATE_CONTEXT_PROCESSORS used by IronTickets:
    'irontickets.context_processors.tickets',
    'irontickets.context_processors.useraccounts',
    'irontickets.context_processors.employees',
    'irontickets.context_processors.forms',

...and the middleware
    'irontickets.middleware.threadlocals.ThreadLocals',

Setup the template location
    TEMPLATE_DIRS = (
        '/home/aaron/itcode/irontickets/templates'
    )

And list the following apps in INSTALLED_APPS:
    INSTALLED_APPS = (
        'django.contrib.auth',
        'django.contrib.contenttypes',
        'django.contrib.sessions',
        'django.contrib.sites',
        'django.contrib.admin',
        'django.contrib.comments',
        'irontickets',
        'django_extensions',
        'avatar',
        'attachments',
        'registration',
        'mailer',
        'ajax_validation',
        'haystack',
    )

Save your settings.py file and go edit urls.py
I recommend the following:

    from django.conf import settings
    from django.contrib import admin
    admin.autodiscover()
    handler404 = 'irontickets.views.show404'
    handler500 = 'irontickets.views.show500'
    urlpatterns = patterns('',
        (r'^admin/doc/', include('django.contrib.admindocs.urls')),
        (r'^admin/', include(admin.site.urls)),
        (r'^', include('irontickets.urls')),
    )

If you are using the django runserver command for your project, you may want to add the following into urls.py to allow django to serve up the media (css, js, images, etc...)
    urlpatterns += patterns('',(r'^projectmedia/(?P<path>.*)$', 'django.views.static.serve', {'document_root': '/home/aaron/itcode/irontickets/media', 'show_indexes': True}),)

Please click the 'issues' button at the top of the page and report any problems!
